
/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GenerateEventEmitterCpp.js
 */

#include <react/renderer/components/rnsvg/EventEmitters.h>


namespace facebook::react {


void RNSVGCircleEventEmitter::onSvgLayout(OnSvgLayout event) const {
  dispatchEvent("svgLayout", [event=std::move(event)](jsi::Runtime &runtime) {
    auto payload = jsi::Object(runtime);
    {
  auto layout = jsi::Object(runtime);
  layout.setProperty(runtime, "x", event.layout.x);
  layout.setProperty(runtime, "y", event.layout.y);
  layout.setProperty(runtime, "width", event.layout.width);
  layout.setProperty(runtime, "height", event.layout.height);
  payload.setProperty(runtime, "layout", layout);
}
    return payload;
  });
}


void RNSVGClipPathEventEmitter::onSvgLayout(OnSvgLayout event) const {
  dispatchEvent("svgLayout", [event=std::move(event)](jsi::Runtime &runtime) {
    auto payload = jsi::Object(runtime);
    {
  auto layout = jsi::Object(runtime);
  layout.setProperty(runtime, "x", event.layout.x);
  layout.setProperty(runtime, "y", event.layout.y);
  layout.setProperty(runtime, "width", event.layout.width);
  layout.setProperty(runtime, "height", event.layout.height);
  payload.setProperty(runtime, "layout", layout);
}
    return payload;
  });
}



void RNSVGEllipseEventEmitter::onSvgLayout(OnSvgLayout event) const {
  dispatchEvent("svgLayout", [event=std::move(event)](jsi::Runtime &runtime) {
    auto payload = jsi::Object(runtime);
    {
  auto layout = jsi::Object(runtime);
  layout.setProperty(runtime, "x", event.layout.x);
  layout.setProperty(runtime, "y", event.layout.y);
  layout.setProperty(runtime, "width", event.layout.width);
  layout.setProperty(runtime, "height", event.layout.height);
  payload.setProperty(runtime, "layout", layout);
}
    return payload;
  });
}










void RNSVGForeignObjectEventEmitter::onSvgLayout(OnSvgLayout event) const {
  dispatchEvent("svgLayout", [event=std::move(event)](jsi::Runtime &runtime) {
    auto payload = jsi::Object(runtime);
    {
  auto layout = jsi::Object(runtime);
  layout.setProperty(runtime, "x", event.layout.x);
  layout.setProperty(runtime, "y", event.layout.y);
  layout.setProperty(runtime, "width", event.layout.width);
  layout.setProperty(runtime, "height", event.layout.height);
  payload.setProperty(runtime, "layout", layout);
}
    return payload;
  });
}


void RNSVGGroupEventEmitter::onSvgLayout(OnSvgLayout event) const {
  dispatchEvent("svgLayout", [event=std::move(event)](jsi::Runtime &runtime) {
    auto payload = jsi::Object(runtime);
    {
  auto layout = jsi::Object(runtime);
  layout.setProperty(runtime, "x", event.layout.x);
  layout.setProperty(runtime, "y", event.layout.y);
  layout.setProperty(runtime, "width", event.layout.width);
  layout.setProperty(runtime, "height", event.layout.height);
  payload.setProperty(runtime, "layout", layout);
}
    return payload;
  });
}


void RNSVGImageEventEmitter::onLoad(OnLoad event) const {
  dispatchEvent("load", [event=std::move(event)](jsi::Runtime &runtime) {
    auto payload = jsi::Object(runtime);
    {
  auto source = jsi::Object(runtime);
  source.setProperty(runtime, "width", event.source.width);
  source.setProperty(runtime, "height", event.source.height);
  source.setProperty(runtime, "uri", event.source.uri);
  payload.setProperty(runtime, "source", source);
}
    return payload;
  });
}


void RNSVGImageEventEmitter::onSvgLayout(OnSvgLayout event) const {
  dispatchEvent("svgLayout", [event=std::move(event)](jsi::Runtime &runtime) {
    auto payload = jsi::Object(runtime);
    {
  auto layout = jsi::Object(runtime);
  layout.setProperty(runtime, "x", event.layout.x);
  layout.setProperty(runtime, "y", event.layout.y);
  layout.setProperty(runtime, "width", event.layout.width);
  layout.setProperty(runtime, "height", event.layout.height);
  payload.setProperty(runtime, "layout", layout);
}
    return payload;
  });
}




void RNSVGLineEventEmitter::onSvgLayout(OnSvgLayout event) const {
  dispatchEvent("svgLayout", [event=std::move(event)](jsi::Runtime &runtime) {
    auto payload = jsi::Object(runtime);
    {
  auto layout = jsi::Object(runtime);
  layout.setProperty(runtime, "x", event.layout.x);
  layout.setProperty(runtime, "y", event.layout.y);
  layout.setProperty(runtime, "width", event.layout.width);
  layout.setProperty(runtime, "height", event.layout.height);
  payload.setProperty(runtime, "layout", layout);
}
    return payload;
  });
}



void RNSVGMaskEventEmitter::onSvgLayout(OnSvgLayout event) const {
  dispatchEvent("svgLayout", [event=std::move(event)](jsi::Runtime &runtime) {
    auto payload = jsi::Object(runtime);
    {
  auto layout = jsi::Object(runtime);
  layout.setProperty(runtime, "x", event.layout.x);
  layout.setProperty(runtime, "y", event.layout.y);
  layout.setProperty(runtime, "width", event.layout.width);
  layout.setProperty(runtime, "height", event.layout.height);
  payload.setProperty(runtime, "layout", layout);
}
    return payload;
  });
}


void RNSVGPathEventEmitter::onSvgLayout(OnSvgLayout event) const {
  dispatchEvent("svgLayout", [event=std::move(event)](jsi::Runtime &runtime) {
    auto payload = jsi::Object(runtime);
    {
  auto layout = jsi::Object(runtime);
  layout.setProperty(runtime, "x", event.layout.x);
  layout.setProperty(runtime, "y", event.layout.y);
  layout.setProperty(runtime, "width", event.layout.width);
  layout.setProperty(runtime, "height", event.layout.height);
  payload.setProperty(runtime, "layout", layout);
}
    return payload;
  });
}




void RNSVGRectEventEmitter::onSvgLayout(OnSvgLayout event) const {
  dispatchEvent("svgLayout", [event=std::move(event)](jsi::Runtime &runtime) {
    auto payload = jsi::Object(runtime);
    {
  auto layout = jsi::Object(runtime);
  layout.setProperty(runtime, "x", event.layout.x);
  layout.setProperty(runtime, "y", event.layout.y);
  layout.setProperty(runtime, "width", event.layout.width);
  layout.setProperty(runtime, "height", event.layout.height);
  payload.setProperty(runtime, "layout", layout);
}
    return payload;
  });
}



void RNSVGTextEventEmitter::onSvgLayout(OnSvgLayout event) const {
  dispatchEvent("svgLayout", [event=std::move(event)](jsi::Runtime &runtime) {
    auto payload = jsi::Object(runtime);
    {
  auto layout = jsi::Object(runtime);
  layout.setProperty(runtime, "x", event.layout.x);
  layout.setProperty(runtime, "y", event.layout.y);
  layout.setProperty(runtime, "width", event.layout.width);
  layout.setProperty(runtime, "height", event.layout.height);
  payload.setProperty(runtime, "layout", layout);
}
    return payload;
  });
}


void RNSVGTextPathEventEmitter::onSvgLayout(OnSvgLayout event) const {
  dispatchEvent("svgLayout", [event=std::move(event)](jsi::Runtime &runtime) {
    auto payload = jsi::Object(runtime);
    {
  auto layout = jsi::Object(runtime);
  layout.setProperty(runtime, "x", event.layout.x);
  layout.setProperty(runtime, "y", event.layout.y);
  layout.setProperty(runtime, "width", event.layout.width);
  layout.setProperty(runtime, "height", event.layout.height);
  payload.setProperty(runtime, "layout", layout);
}
    return payload;
  });
}


void RNSVGTSpanEventEmitter::onSvgLayout(OnSvgLayout event) const {
  dispatchEvent("svgLayout", [event=std::move(event)](jsi::Runtime &runtime) {
    auto payload = jsi::Object(runtime);
    {
  auto layout = jsi::Object(runtime);
  layout.setProperty(runtime, "x", event.layout.x);
  layout.setProperty(runtime, "y", event.layout.y);
  layout.setProperty(runtime, "width", event.layout.width);
  layout.setProperty(runtime, "height", event.layout.height);
  payload.setProperty(runtime, "layout", layout);
}
    return payload;
  });
}


void RNSVGUseEventEmitter::onSvgLayout(OnSvgLayout event) const {
  dispatchEvent("svgLayout", [event=std::move(event)](jsi::Runtime &runtime) {
    auto payload = jsi::Object(runtime);
    {
  auto layout = jsi::Object(runtime);
  layout.setProperty(runtime, "x", event.layout.x);
  layout.setProperty(runtime, "y", event.layout.y);
  layout.setProperty(runtime, "width", event.layout.width);
  layout.setProperty(runtime, "height", event.layout.height);
  payload.setProperty(runtime, "layout", layout);
}
    return payload;
  });
}

} // namespace facebook::react
