
/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GeneratePropsCpp.js
 */

#include <react/renderer/components/RNDateTimePickerCGen/Props.h>
#include <react/renderer/core/PropsParserContext.h>
#include <react/renderer/core/propsConversions.h>

namespace facebook::react {

RNDateTimePickerProps::RNDateTimePickerProps(
    const PropsParserContext &context,
    const RNDateTimePickerProps &sourceProps,
    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),

    accentColor(convertRawProp(context, rawProps, "accentColor", sourceProps.accentColor, {})),
    date(convertRawProp(context, rawProps, "date", sourceProps.date, {0.0})),
    displayIOS(convertRawProp(context, rawProps, "displayIOS", sourceProps.displayIOS, {RNDateTimePickerDisplayIOS::Default})),
    locale(convertRawProp(context, rawProps, "locale", sourceProps.locale, {})),
    maximumDate(convertRawProp(context, rawProps, "maximumDate", sourceProps.maximumDate, {0.0})),
    minimumDate(convertRawProp(context, rawProps, "minimumDate", sourceProps.minimumDate, {0.0})),
    minuteInterval(convertRawProp(context, rawProps, "minuteInterval", sourceProps.minuteInterval, {0})),
    mode(convertRawProp(context, rawProps, "mode", sourceProps.mode, {RNDateTimePickerMode::Date})),
    textColor(convertRawProp(context, rawProps, "textColor", sourceProps.textColor, {})),
    themeVariant(convertRawProp(context, rawProps, "themeVariant", sourceProps.themeVariant, {RNDateTimePickerThemeVariant::Unspecified})),
    timeZoneName(convertRawProp(context, rawProps, "timeZoneName", sourceProps.timeZoneName, {})),
    timeZoneOffsetInMinutes(convertRawProp(context, rawProps, "timeZoneOffsetInMinutes", sourceProps.timeZoneOffsetInMinutes, {0.0})),
    enabled(convertRawProp(context, rawProps, "enabled", sourceProps.enabled, {true})) {}
    
#ifdef RN_SERIALIZABLE_STATE
ComponentName RNDateTimePickerProps::getDiffPropsImplementationTarget() const {
  return "RNDateTimePicker";
}

folly::dynamic RNDateTimePickerProps::getDiffProps(
    const Props* prevProps) const {
  static const auto defaultProps = RNDateTimePickerProps();
  const RNDateTimePickerProps* oldProps = prevProps == nullptr
      ? &defaultProps
      : static_cast<const RNDateTimePickerProps*>(prevProps);
  if (this == oldProps) {
    return folly::dynamic::object();
  }
  folly::dynamic result = HostPlatformViewProps::getDiffProps(prevProps);
  
  if (accentColor != oldProps->accentColor) {
    result["accentColor"] = *accentColor;
  }
    
  if ((date != oldProps->date) && !(std::isnan(date) && std::isnan(oldProps->date))) {
    result["date"] = date;
  }
    
  if (displayIOS != oldProps->displayIOS) {
    result["displayIOS"] = toDynamic(displayIOS);
  }
    
  if (locale != oldProps->locale) {
    result["locale"] = locale;
  }
    
  if ((maximumDate != oldProps->maximumDate) && !(std::isnan(maximumDate) && std::isnan(oldProps->maximumDate))) {
    result["maximumDate"] = maximumDate;
  }
    
  if ((minimumDate != oldProps->minimumDate) && !(std::isnan(minimumDate) && std::isnan(oldProps->minimumDate))) {
    result["minimumDate"] = minimumDate;
  }
    
  if (minuteInterval != oldProps->minuteInterval) {
    result["minuteInterval"] = minuteInterval;
  }
    
  if (mode != oldProps->mode) {
    result["mode"] = toDynamic(mode);
  }
    
  if (textColor != oldProps->textColor) {
    result["textColor"] = *textColor;
  }
    
  if (themeVariant != oldProps->themeVariant) {
    result["themeVariant"] = toDynamic(themeVariant);
  }
    
  if (timeZoneName != oldProps->timeZoneName) {
    result["timeZoneName"] = timeZoneName;
  }
    
  if ((timeZoneOffsetInMinutes != oldProps->timeZoneOffsetInMinutes) && !(std::isnan(timeZoneOffsetInMinutes) && std::isnan(oldProps->timeZoneOffsetInMinutes))) {
    result["timeZoneOffsetInMinutes"] = timeZoneOffsetInMinutes;
  }
    
  if (enabled != oldProps->enabled) {
    result["enabled"] = enabled;
  }
  return result;
}
#endif

} // namespace facebook::react
