
/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GeneratePropsCpp.js
 */

#include <react/renderer/components/rnpicker/Props.h>
#include <folly/dynamic.h>
#include <react/renderer/core/PropsParserContext.h>
#include <react/renderer/core/propsConversions.h>

namespace facebook::react {

RNCAndroidDialogPickerProps::RNCAndroidDialogPickerProps(
    const PropsParserContext &context,
    const RNCAndroidDialogPickerProps &sourceProps,
    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),

    items(convertRawProp(context, rawProps, "items", sourceProps.items, {})),
    color(convertRawProp(context, rawProps, "color", sourceProps.color, {})),
    prompt(convertRawProp(context, rawProps, "prompt", sourceProps.prompt, {})),
    enabled(convertRawProp(context, rawProps, "enabled", sourceProps.enabled, {false})),
    selected(convertRawProp(context, rawProps, "selected", sourceProps.selected, {0})),
    backgroundColor(convertRawProp(context, rawProps, "backgroundColor", sourceProps.backgroundColor, {0})),
    dropdownIconColor(convertRawProp(context, rawProps, "dropdownIconColor", sourceProps.dropdownIconColor, {0})),
    dropdownIconRippleColor(convertRawProp(context, rawProps, "dropdownIconRippleColor", sourceProps.dropdownIconRippleColor, {0})),
    numberOfLines(convertRawProp(context, rawProps, "numberOfLines", sourceProps.numberOfLines, {0})) {}
    
#ifdef RN_SERIALIZABLE_STATE
ComponentName RNCAndroidDialogPickerProps::getDiffPropsImplementationTarget() const {
  return "RNCAndroidDialogPicker";
}

folly::dynamic RNCAndroidDialogPickerProps::getDiffProps(
    const Props* prevProps) const {
  static const auto defaultProps = RNCAndroidDialogPickerProps();
  const RNCAndroidDialogPickerProps* oldProps = prevProps == nullptr
      ? &defaultProps
      : static_cast<const RNCAndroidDialogPickerProps*>(prevProps);
  if (this == oldProps) {
    return folly::dynamic::object();
  }
  folly::dynamic result = HostPlatformViewProps::getDiffProps(prevProps);
  
  if (items != oldProps->items) {
    result["items"] = toDynamic(items);
  }
    
  if (color != oldProps->color) {
    result["color"] = *color;
  }
    
  if (prompt != oldProps->prompt) {
    result["prompt"] = prompt;
  }
    
  if (enabled != oldProps->enabled) {
    result["enabled"] = enabled;
  }
    
  if (selected != oldProps->selected) {
    result["selected"] = selected;
  }
    
  if (backgroundColor != oldProps->backgroundColor) {
    result["backgroundColor"] = backgroundColor;
  }
    
  if (dropdownIconColor != oldProps->dropdownIconColor) {
    result["dropdownIconColor"] = dropdownIconColor;
  }
    
  if (dropdownIconRippleColor != oldProps->dropdownIconRippleColor) {
    result["dropdownIconRippleColor"] = dropdownIconRippleColor;
  }
    
  if (numberOfLines != oldProps->numberOfLines) {
    result["numberOfLines"] = numberOfLines;
  }
  return result;
}
#endif
RNCAndroidDropdownPickerProps::RNCAndroidDropdownPickerProps(
    const PropsParserContext &context,
    const RNCAndroidDropdownPickerProps &sourceProps,
    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),

    items(convertRawProp(context, rawProps, "items", sourceProps.items, {})),
    color(convertRawProp(context, rawProps, "color", sourceProps.color, {})),
    prompt(convertRawProp(context, rawProps, "prompt", sourceProps.prompt, {})),
    enabled(convertRawProp(context, rawProps, "enabled", sourceProps.enabled, {false})),
    selected(convertRawProp(context, rawProps, "selected", sourceProps.selected, {0})),
    backgroundColor(convertRawProp(context, rawProps, "backgroundColor", sourceProps.backgroundColor, {0})),
    dropdownIconColor(convertRawProp(context, rawProps, "dropdownIconColor", sourceProps.dropdownIconColor, {0})),
    dropdownIconRippleColor(convertRawProp(context, rawProps, "dropdownIconRippleColor", sourceProps.dropdownIconRippleColor, {0})),
    numberOfLines(convertRawProp(context, rawProps, "numberOfLines", sourceProps.numberOfLines, {0})) {}
    
#ifdef RN_SERIALIZABLE_STATE
ComponentName RNCAndroidDropdownPickerProps::getDiffPropsImplementationTarget() const {
  return "RNCAndroidDropdownPicker";
}

folly::dynamic RNCAndroidDropdownPickerProps::getDiffProps(
    const Props* prevProps) const {
  static const auto defaultProps = RNCAndroidDropdownPickerProps();
  const RNCAndroidDropdownPickerProps* oldProps = prevProps == nullptr
      ? &defaultProps
      : static_cast<const RNCAndroidDropdownPickerProps*>(prevProps);
  if (this == oldProps) {
    return folly::dynamic::object();
  }
  folly::dynamic result = HostPlatformViewProps::getDiffProps(prevProps);
  
  if (items != oldProps->items) {
    result["items"] = toDynamic(items);
  }
    
  if (color != oldProps->color) {
    result["color"] = *color;
  }
    
  if (prompt != oldProps->prompt) {
    result["prompt"] = prompt;
  }
    
  if (enabled != oldProps->enabled) {
    result["enabled"] = enabled;
  }
    
  if (selected != oldProps->selected) {
    result["selected"] = selected;
  }
    
  if (backgroundColor != oldProps->backgroundColor) {
    result["backgroundColor"] = backgroundColor;
  }
    
  if (dropdownIconColor != oldProps->dropdownIconColor) {
    result["dropdownIconColor"] = dropdownIconColor;
  }
    
  if (dropdownIconRippleColor != oldProps->dropdownIconRippleColor) {
    result["dropdownIconRippleColor"] = dropdownIconRippleColor;
  }
    
  if (numberOfLines != oldProps->numberOfLines) {
    result["numberOfLines"] = numberOfLines;
  }
  return result;
}
#endif
RNCPickerProps::RNCPickerProps(
    const PropsParserContext &context,
    const RNCPickerProps &sourceProps,
    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),

    items(convertRawProp(context, rawProps, "items", sourceProps.items, {})),
    selectedIndex(convertRawProp(context, rawProps, "selectedIndex", sourceProps.selectedIndex, {0})),
    selectionColor(convertRawProp(context, rawProps, "selectionColor", sourceProps.selectionColor, {})),
    color(convertRawProp(context, rawProps, "color", sourceProps.color, {})),
    textAlign(convertRawProp(context, rawProps, "textAlign", sourceProps.textAlign, {})),
    numberOfLines(convertRawProp(context, rawProps, "numberOfLines", sourceProps.numberOfLines, {0})),
    fontSize(convertRawProp(context, rawProps, "fontSize", sourceProps.fontSize, {0})),
    fontWeight(convertRawProp(context, rawProps, "fontWeight", sourceProps.fontWeight, {})),
    fontStyle(convertRawProp(context, rawProps, "fontStyle", sourceProps.fontStyle, {})),
    fontFamily(convertRawProp(context, rawProps, "fontFamily", sourceProps.fontFamily, {})),
    testID(convertRawProp(context, rawProps, "testID", sourceProps.testID, {})),
    themeVariant(convertRawProp(context, rawProps, "themeVariant", sourceProps.themeVariant, {})),
    fakeProp(convertRawProp(context, rawProps, "fakeProp", sourceProps.fakeProp, {})) {}
    
#ifdef RN_SERIALIZABLE_STATE
ComponentName RNCPickerProps::getDiffPropsImplementationTarget() const {
  return "RNCPicker";
}

folly::dynamic RNCPickerProps::getDiffProps(
    const Props* prevProps) const {
  static const auto defaultProps = RNCPickerProps();
  const RNCPickerProps* oldProps = prevProps == nullptr
      ? &defaultProps
      : static_cast<const RNCPickerProps*>(prevProps);
  if (this == oldProps) {
    return folly::dynamic::object();
  }
  folly::dynamic result = HostPlatformViewProps::getDiffProps(prevProps);
  
  if (items != oldProps->items) {
    result["items"] = toDynamic(items);
  }
    
  if (selectedIndex != oldProps->selectedIndex) {
    result["selectedIndex"] = selectedIndex;
  }
    
  if (selectionColor != oldProps->selectionColor) {
    result["selectionColor"] = *selectionColor;
  }
    
  if (color != oldProps->color) {
    result["color"] = *color;
  }
    
  if (textAlign != oldProps->textAlign) {
    result["textAlign"] = textAlign;
  }
    
  if (numberOfLines != oldProps->numberOfLines) {
    result["numberOfLines"] = numberOfLines;
  }
    
  if (fontSize != oldProps->fontSize) {
    result["fontSize"] = fontSize;
  }
    
  if (fontWeight != oldProps->fontWeight) {
    result["fontWeight"] = fontWeight;
  }
    
  if (fontStyle != oldProps->fontStyle) {
    result["fontStyle"] = fontStyle;
  }
    
  if (fontFamily != oldProps->fontFamily) {
    result["fontFamily"] = fontFamily;
  }
    
  if (testID != oldProps->testID) {
    result["testID"] = testID;
  }
    
  if (themeVariant != oldProps->themeVariant) {
    result["themeVariant"] = themeVariant;
  }
    
  if (fakeProp != oldProps->fakeProp) {
    result["fakeProp"] = toDynamic(fakeProp);
  }
  return result;
}
#endif

} // namespace facebook::react
